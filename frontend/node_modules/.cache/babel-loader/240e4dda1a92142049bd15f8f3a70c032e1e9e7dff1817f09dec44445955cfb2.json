{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n  }\n\n  //Проверка\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\n  }\n\n  //Универсальный метода запроса\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n\n  //Загрузка информации о пользователе с сервера\n  getProfileInfo(token) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards(token) {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n\n  //Редактирование профиля\n  setUserInfo(dataUser, token) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: dataUser.name,\n        about: dataUser.about\n      })\n    });\n  }\n\n  //Обновление аватара пользователя\n  setUserAvatar(dataUser, token) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: dataUser.avatar\n      })\n    });\n  }\n\n  //Добавление новой карточки\n  postNewCard(dataCard, token) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: dataCard.name,\n        link: dataCard.link\n      })\n    });\n  }\n\n  //добавление и удаление лайков\n  changeLikeCardStatus(cardId, isLiked, token) {\n    if (isLiked) {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    } else {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    }\n  }\n\n  //Удаление карточки\n  deleteCard(cardId, token) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n}\n\n//https://mesto.nomoreparties.co/v1/cohort-69\nexport const api = new Api({\n  baseUrl: 'http://localhost:3000'\n});","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_checkResponse","res","ok","json","Promise","reject","status","_request","url","fetch","then","getProfileInfo","token","headers","getInitialCards","setUserInfo","dataUser","method","body","JSON","stringify","name","about","setUserAvatar","avatar","postNewCard","dataCard","link","changeLikeCardStatus","cardId","isLiked","deleteCard","api"],"sources":["/Users/a1/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this._baseUrl = options.baseUrl;\r\n  }\r\n\r\n  //Проверка\r\n  _checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\r\n  }\r\n\r\n  //Универсальный метода запроса\r\n  _request(url, options) {\r\n    return fetch(url, options).then(this._checkResponse)\r\n  }\r\n\r\n  //Загрузка информации о пользователе с сервера\r\n  getProfileInfo(token) {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      headers: { \r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    })\r\n  }\r\n\r\n  //Загрузка карточек с сервера\r\n  getInitialCards(token) {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      headers: { \r\n        'Authorization': `Bearer ${token}` \r\n      }\r\n    })\r\n  }\r\n\r\n  //Редактирование профиля\r\n  setUserInfo(dataUser, token) {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        name: dataUser.name,\r\n        about: dataUser.about,\r\n      })\r\n    })\r\n  }\r\n\r\n  //Обновление аватара пользователя\r\n  setUserAvatar(dataUser, token) {\r\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: dataUser.avatar,\r\n      })\r\n    })\r\n  }\r\n\r\n  //Добавление новой карточки\r\n  postNewCard(dataCard, token) {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        name: dataCard.name,\r\n        link: dataCard.link,\r\n      })\r\n    })\r\n  }\r\n\r\n  //добавление и удаление лайков\r\n  changeLikeCardStatus(cardId, isLiked, token) {\r\n    if (isLiked) {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Authorization': `Bearer ${token}` \r\n        }\r\n      })\r\n    } else {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'DELETE',\r\n        headers: { \r\n          'Authorization': `Bearer ${token}` \r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //Удаление карточки\r\n  deleteCard(cardId, token) {\r\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: { \r\n        'Authorization': `Bearer ${token}` \r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n//https://mesto.nomoreparties.co/v1/cohort-69\r\nexport const api = new Api({\r\n  baseUrl: 'http://localhost:3000',\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}