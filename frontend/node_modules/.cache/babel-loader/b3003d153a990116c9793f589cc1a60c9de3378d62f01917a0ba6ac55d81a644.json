{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n\n  //Проверка\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\n  }\n\n  //Универсальный метода запроса\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n\n  //Загрузка информации о пользователе с сервера\n  getProfileInfo() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards() {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n\n  //Редактирование профиля\n  setUserInfo(dataUser) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: dataUser.name,\n        about: dataUser.about\n      })\n    });\n  }\n\n  //Обновление аватара пользователя\n  setUserAvatar(dataUser) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: dataUser.avatar\n      })\n    });\n  }\n\n  //Добавление новой карточки\n  postNewCard(dataCard) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: dataCard.name,\n        link: dataCard.link\n      })\n    });\n  }\n\n  //добавление и удаление лайков\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: this._authorization\n        }\n      });\n    } else {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._authorization\n        }\n      });\n    }\n  }\n\n  //Удаление карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: '9675f261-5028-4072-91c8-021126ec9131',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","status","_request","url","fetch","then","getProfileInfo","getInitialCards","setUserInfo","dataUser","method","body","JSON","stringify","name","about","setUserAvatar","avatar","postNewCard","dataCard","link","changeLikeCardStatus","cardId","isLiked","deleteCard","api"],"sources":["/Users/a1/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n\n  //Проверка\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\n  }\n\n  //Универсальный метода запроса\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse)\n  }\n\n  //Загрузка информации о пользователе с сервера\n  getProfileInfo() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: { authorization: this._authorization }\n    })\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards() {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: { authorization: this._authorization }\n    })\n  }\n\n  //Редактирование профиля\n  setUserInfo(dataUser) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: dataUser.name,\n        about: dataUser.about,\n      })\n    })\n  }\n\n  //Обновление аватара пользователя\n  setUserAvatar(dataUser) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: dataUser.avatar,\n      })\n    })\n  }\n\n  //Добавление новой карточки\n  postNewCard(dataCard) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: dataCard.name,\n        link: dataCard.link,\n      })\n    })\n  }\n\n  //добавление и удаление лайков\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: { authorization: this._authorization }\n      })\n    } else {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: { authorization: this._authorization }\n      })\n    }\n  }\n\n  //Удаление карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: { authorization: this._authorization }\n    })\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: '9675f261-5028-4072-91c8-021126ec9131',\n    'Content-Type': 'application/json'\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}