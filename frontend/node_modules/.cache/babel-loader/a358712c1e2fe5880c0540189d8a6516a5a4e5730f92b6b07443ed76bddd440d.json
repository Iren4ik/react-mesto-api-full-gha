{"ast":null,"code":"// class Api {\n//   constructor({ baseUrl }) {\n//     this._baseUrl = baseUrl;\n//   }\n\n//   //Проверка\n//   _checkResponse(res) {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Ой! Ошибка: ${res.status}`);\n//   }\n\n//   //Универсальный метода запроса\n//   _request(url, options) {\n//     return fetch(url, options).then(this._checkResponse)\n//   }\n\n//   //Загрузка информации о пользователе с сервера\n//   getProfileInfo() {\n//     return this._request(`${this._baseUrl}/users/me`, {\n//       headers: { \n//         'Authorization': `Bearer ${localStorage.getItem('token')}`\n//       }\n//     })\n//   }\n\n//   //Загрузка карточек с сервера\n//   getInitialCards() {\n//     return this._request(`${this._baseUrl}/cards`, {\n//       headers: { \n//         'Authorization': `Bearer ${localStorage.getItem('token')}` \n//       }\n//     })\n//   }\n\n//   //Редактирование профиля\n//   setUserInfo(dataUser) {\n//     return this._request(`${this._baseUrl}/users/me`, {\n//       method: 'PATCH',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify({\n//         name: dataUser.name,\n//         about: dataUser.about,\n//       })\n//     })\n//   }\n\n//   //Обновление аватара пользователя\n//   setUserAvatar(dataUser) {\n//     return this._request(`${this._baseUrl}/users/me/avatar`, {\n//       method: 'PATCH',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify({\n//         avatar: dataUser.avatar,\n//       })\n//     })\n//   }\n\n//   //Добавление новой карточки\n//   postNewCard(dataCard) {\n//     return this._request(`${this._baseUrl}/cards`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify({\n//         name: dataCard.name,\n//         link: dataCard.link,\n//       })\n//     })\n//   }\n\n//   //добавление и удаление лайков\n//   changeLikeCardStatus(cardId, isLiked) {\n//     if (isLiked) {\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n//         method: 'PUT',\n//         headers: { \n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \n//         }\n//       })\n//     } else {\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n//         method: 'DELETE',\n//         headers: { \n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \n//         }\n//       })\n//     }\n//   }\n\n//   //Удаление карточки\n//   deleteCard(cardId) {\n//     return this._request(`${this._baseUrl}/cards/${cardId}`, {\n//       method: 'DELETE',\n//       headers: { \n//         'Authorization': `Bearer ${localStorage.getItem('token')}` \n//       }\n//     })\n//   }\n// }\n\n// //https://mesto.nomoreparties.co/v1/cohort-69\n// export const api = new Api({\n//   baseUrl: 'http://localhost:3000',\n// });\n\nclass Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n  }\n\n  //checking the server response\n  _handleResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n\n    //reject promise\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  //edit profile\n  async setUserInfo(data) {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._handleResponse(response);\n  }\n\n  //downloading user info trom the server\n  async getProfileInfo() {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return this._handleResponse(response);\n  }\n\n  //downloading cards from the server\n  async getInitialCards() {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return this._handleResponse(response);\n  }\n\n  //add a new card from the server\n  async postNewCard(data) {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(data)\n    });\n    return this._handleResponse(response);\n  }\n\n  //delete card\n  async deleteCard(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return this._handleResponse(response);\n  }\n\n  //добавление и удаление лайков\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n    } else {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n    }\n  }\n\n  //avatar update avatar\n  async setUserAvatar(data) {\n    const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n    return this._handleResponse(response);\n  }\n}\n\n//https://mesto.nomoreparties.co/v1/cohort-69\nexport const api = new Api({\n  baseUrl: 'http://localhost:3000'\n});","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_handleResponse","res","ok","Promise","resolve","json","reject","status","setUserInfo","data","response","fetch","method","headers","authorization","localStorage","getItem","body","JSON","stringify","name","about","getProfileInfo","getInitialCards","postNewCard","deleteCard","cardId","changeLikeCardStatus","isLiked","_request","setUserAvatar","avatar","api"],"sources":["/Users/a1/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["// class Api {\r\n//   constructor({ baseUrl }) {\r\n//     this._baseUrl = baseUrl;\r\n//   }\r\n\r\n//   //Проверка\r\n//   _checkResponse(res) {\r\n//     if (res.ok) {\r\n//       return res.json();\r\n//     }\r\n//     return Promise.reject(`Ой! Ошибка: ${res.status}`);\r\n//   }\r\n\r\n//   //Универсальный метода запроса\r\n//   _request(url, options) {\r\n//     return fetch(url, options).then(this._checkResponse)\r\n//   }\r\n\r\n//   //Загрузка информации о пользователе с сервера\r\n//   getProfileInfo() {\r\n//     return this._request(`${this._baseUrl}/users/me`, {\r\n//       headers: { \r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   //Загрузка карточек с сервера\r\n//   getInitialCards() {\r\n//     return this._request(`${this._baseUrl}/cards`, {\r\n//       headers: { \r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   //Редактирование профиля\r\n//   setUserInfo(dataUser) {\r\n//     return this._request(`${this._baseUrl}/users/me`, {\r\n//       method: 'PATCH',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         name: dataUser.name,\r\n//         about: dataUser.about,\r\n//       })\r\n//     })\r\n//   }\r\n\r\n//   //Обновление аватара пользователя\r\n//   setUserAvatar(dataUser) {\r\n//     return this._request(`${this._baseUrl}/users/me/avatar`, {\r\n//       method: 'PATCH',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         avatar: dataUser.avatar,\r\n//       })\r\n//     })\r\n//   }\r\n\r\n//   //Добавление новой карточки\r\n//   postNewCard(dataCard) {\r\n//     return this._request(`${this._baseUrl}/cards`, {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         name: dataCard.name,\r\n//         link: dataCard.link,\r\n//       })\r\n//     })\r\n//   }\r\n\r\n//   //добавление и удаление лайков\r\n//   changeLikeCardStatus(cardId, isLiked) {\r\n//     if (isLiked) {\r\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n//         method: 'PUT',\r\n//         headers: { \r\n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//         }\r\n//       })\r\n//     } else {\r\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n//         method: 'DELETE',\r\n//         headers: { \r\n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//         }\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   //Удаление карточки\r\n//   deleteCard(cardId) {\r\n//     return this._request(`${this._baseUrl}/cards/${cardId}`, {\r\n//       method: 'DELETE',\r\n//       headers: { \r\n//         'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//       }\r\n//     })\r\n//   }\r\n// }\r\n\r\n// //https://mesto.nomoreparties.co/v1/cohort-69\r\n// export const api = new Api({\r\n//   baseUrl: 'http://localhost:3000',\r\n// });\r\n\r\nclass Api {\r\n  constructor(options) {\r\n    this._baseUrl = options.baseUrl;\r\n  }\r\n\r\n  //checking the server response\r\n  _handleResponse(res) {\r\n    if (res.ok) {\r\n      return Promise.resolve(res.json());\r\n    }\r\n\r\n    //reject promise\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  //edit profile\r\n  async setUserInfo(data) {\r\n    const response = await fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      }),\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n\r\n  //downloading user info trom the server\r\n  async getProfileInfo() {\r\n    const response = await fetch(`${this._baseUrl}/users/me`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n\r\n  //downloading cards from the server\r\n  async getInitialCards() {\r\n    const response = await fetch(`${this._baseUrl}/cards`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n\r\n  //add a new card from the server\r\n  async postNewCard(data) {\r\n    const response = await fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n\r\n  //delete card\r\n  async deleteCard(cardId) {\r\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n\r\n  //добавление и удаление лайков\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    if (isLiked) {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n        }\r\n      })\r\n    } else {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'DELETE',\r\n        headers: { \r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //avatar update avatar\r\n  async setUserAvatar(data) {\r\n    const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      }),\r\n    });\r\n    return this._handleResponse(response);\r\n  }\r\n}\r\n\r\n//https://mesto.nomoreparties.co/v1/cohort-69\r\nexport const api = new Api({\r\n  baseUrl: 'http://localhost:3000',\r\n});"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}