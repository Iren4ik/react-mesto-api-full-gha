{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl\n  }) {\n    this._baseUrl = baseUrl;\n  }\n\n  //Проверка\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\n  }\n\n  //Универсальный метода запроса\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n\n  //Загрузка информации о пользователе с сервера\n  getProfileInfo() {\n    return this._request(`${this._baseUrl}/users/me`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards() {\n    return this._request(`${this._baseUrl}/cards`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  }\n\n  //Редактирование профиля\n  setUserInfo(dataUser) {\n    return this._request(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        name: dataUser.name,\n        about: dataUser.about\n      })\n    });\n  }\n\n  //Обновление аватара пользователя\n  setUserAvatar(dataUser) {\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        avatar: dataUser.avatar\n      })\n    });\n  }\n\n  //Добавление новой карточки\n  postNewCard(dataCard) {\n    return this._request(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        name: dataCard.name,\n        link: dataCard.link\n      })\n    });\n  }\n\n  //добавление и удаление лайков\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n    } else {\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n    }\n  }\n\n  //Удаление карточки\n  deleteCard(cardId) {\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n  }\n}\n\n//https://mesto.nomoreparties.co/v1/cohort-69\nexport const api = new Api({\n  baseUrl: 'http://localhost:3000'\n});\n\n// class Api {\n//   constructor(options) {\n//     this._baseUrl = options.baseUrl;\n//   }\n\n//   //checking the server response\n//   _handleResponse(res) {\n//     if (res.ok) {\n//       return Promise.resolve(res.json());\n//     }\n\n//     //reject promise\n//     return Promise.reject(`Ошибка: ${res.status}`);\n//   }\n\n//   //edit profile\n//   async setUserInfo(data) {\n//     const response = await fetch(`${this._baseUrl}/users/me`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       }),\n//     });\n//     return this._handleResponse(response);\n//   }\n\n//   //downloading user info trom the server\n//   async getProfileInfo() {\n//     const response = await fetch(`${this._baseUrl}/users/me`, {\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//     });\n//     return this._handleResponse(response);\n//   }\n\n//   //downloading cards from the server\n//   async getInitialCards() {\n//     const response = await fetch(`${this._baseUrl}/cards`, {\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//     });\n//     return this._handleResponse(response);\n//   }\n\n//   //add a new card from the server\n//   async postNewCard(data) {\n//     const response = await fetch(`${this._baseUrl}/cards`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify(data),\n//     });\n//     return this._handleResponse(response);\n//   }\n\n//   //delete card\n//   async deleteCard(cardId) {\n//     const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n//       method: \"DELETE\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//     });\n//     return this._handleResponse(response);\n//   }\n\n//   //добавление и удаление лайков\n//   changeLikeCardStatus(cardId, isLiked) {\n//     if (isLiked) {\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n//         method: 'PUT',\n//         headers: { \n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \n//         }\n//       })\n//     } else {\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\n//         method: 'DELETE',\n//         headers: { \n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \n//         }\n//       })\n//     }\n//   }\n\n//   //avatar update avatar\n//   async setUserAvatar(data) {\n//     const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\n//       method: \"PATCH\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//       body: JSON.stringify({\n//         avatar: data.avatar,\n//       }),\n//     });\n//     return this._handleResponse(response);\n//   }\n// }\n\n// //https://mesto.nomoreparties.co/v1/cohort-69\n// export const api = new Api({\n//   baseUrl: 'http://localhost:3000',\n// });","map":{"version":3,"names":["Api","constructor","baseUrl","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","_request","url","options","fetch","then","getProfileInfo","headers","localStorage","getItem","getInitialCards","setUserInfo","dataUser","method","body","JSON","stringify","name","about","setUserAvatar","avatar","postNewCard","dataCard","link","changeLikeCardStatus","cardId","isLiked","deleteCard","api"],"sources":["/Users/a1/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor({ baseUrl }) {\r\n    this._baseUrl = baseUrl;\r\n  }\r\n\r\n  //Проверка\r\n  _checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ой! Ошибка: ${res.status}`);\r\n  }\r\n\r\n  //Универсальный метода запроса\r\n  _request(url, options) {\r\n    return fetch(url, options).then(this._checkResponse)\r\n  }\r\n\r\n  //Загрузка информации о пользователе с сервера\r\n  getProfileInfo() {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      headers: { \r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    })\r\n  }\r\n\r\n  //Загрузка карточек с сервера\r\n  getInitialCards() {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      headers: { \r\n        'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n  }\r\n\r\n  //Редактирование профиля\r\n  setUserInfo(dataUser) {\r\n    return this._request(`${this._baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({\r\n        name: dataUser.name,\r\n        about: dataUser.about,\r\n      })\r\n    })\r\n  }\r\n\r\n  //Обновление аватара пользователя\r\n  setUserAvatar(dataUser) {\r\n    return this._request(`${this._baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: dataUser.avatar,\r\n      })\r\n    })\r\n  }\r\n\r\n  //Добавление новой карточки\r\n  postNewCard(dataCard) {\r\n    return this._request(`${this._baseUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({\r\n        name: dataCard.name,\r\n        link: dataCard.link,\r\n      })\r\n    })\r\n  }\r\n\r\n  //добавление и удаление лайков\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    if (isLiked) {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'PUT',\r\n        headers: { \r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n        }\r\n      })\r\n    } else {\r\n      return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n        method: 'DELETE',\r\n        headers: { \r\n          'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //Удаление карточки\r\n  deleteCard(cardId) {\r\n    return this._request(`${this._baseUrl}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: { \r\n        'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n//https://mesto.nomoreparties.co/v1/cohort-69\r\nexport const api = new Api({\r\n  baseUrl: 'http://localhost:3000',\r\n});\r\n\r\n// class Api {\r\n//   constructor(options) {\r\n//     this._baseUrl = options.baseUrl;\r\n//   }\r\n\r\n//   //checking the server response\r\n//   _handleResponse(res) {\r\n//     if (res.ok) {\r\n//       return Promise.resolve(res.json());\r\n//     }\r\n\r\n//     //reject promise\r\n//     return Promise.reject(`Ошибка: ${res.status}`);\r\n//   }\r\n\r\n//   //edit profile\r\n//   async setUserInfo(data) {\r\n//     const response = await fetch(`${this._baseUrl}/users/me`, {\r\n//       method: \"PATCH\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         name: data.name,\r\n//         about: data.about,\r\n//       }),\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n\r\n//   //downloading user info trom the server\r\n//   async getProfileInfo() {\r\n//     const response = await fetch(`${this._baseUrl}/users/me`, {\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n\r\n//   //downloading cards from the server\r\n//   async getInitialCards() {\r\n//     const response = await fetch(`${this._baseUrl}/cards`, {\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n\r\n//   //add a new card from the server\r\n//   async postNewCard(data) {\r\n//     const response = await fetch(`${this._baseUrl}/cards`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify(data),\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n\r\n//   //delete card\r\n//   async deleteCard(cardId) {\r\n//     const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\r\n//       method: \"DELETE\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n\r\n//   //добавление и удаление лайков\r\n//   changeLikeCardStatus(cardId, isLiked) {\r\n//     if (isLiked) {\r\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n//         method: 'PUT',\r\n//         headers: { \r\n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//         }\r\n//       })\r\n//     } else {\r\n//       return this._request(`${this._baseUrl}/cards/${cardId}/likes`, {\r\n//         method: 'DELETE',\r\n//         headers: { \r\n//           'Authorization': `Bearer ${localStorage.getItem('token')}` \r\n//         }\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   //avatar update avatar\r\n//   async setUserAvatar(data) {\r\n//     const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\r\n//       method: \"PATCH\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         avatar: data.avatar,\r\n//       }),\r\n//     });\r\n//     return this._handleResponse(response);\r\n//   }\r\n// }\r\n\r\n// //https://mesto.nomoreparties.co/v1/cohort-69\r\n// export const api = new Api({\r\n//   baseUrl: 'http://localhost:3000',\r\n// });"],"mappings":"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,EAAE,QAAQ;MAChBN,OAAO,EAAE;QACP,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;MAC3D;IACF,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,OAAO,MAAMmB,GAAG,GAAG,IAAItC,GAAG,CAAC;EACzBE,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}